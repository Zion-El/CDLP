# Generated by Django 4.2.1 on 2023-05-17 15:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('firstname', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('lastname', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('whenjoined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_code', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('salt', models.CharField(blank=True, max_length=150, null=True)),
                ('sex', models.CharField(blank=True, choices=[('M', 'male'), ('F', 'female')], max_length=6, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('street', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('user_type', models.IntegerField(default=0)),
                ('r_id', models.IntegerField(default=0)),
                ('secret_question1', models.CharField(blank=True, max_length=250, null=True)),
                ('secret_question2', models.CharField(blank=True, max_length=250, null=True)),
                ('secret_answer1', models.CharField(blank=True, max_length=100, null=True)),
                ('secret_answer2', models.CharField(blank=True, max_length=100, null=True)),
                ('email_confirm', models.BooleanField(default=False)),
                ('phone_confirm', models.BooleanField(default=False)),
                ('confirmed', models.BooleanField(default=False)),
                ('aff_id', models.CharField(blank=True, max_length=32, null=True, unique=True)),
                ('ref_id', models.CharField(blank=True, max_length=32, null=True)),
                ('findus', models.CharField(blank=True, max_length=32, null=True)),
                ('regip', models.CharField(blank=True, db_column='regIP', max_length=15, null=True)),
                ('api_key', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('api_active', models.BooleanField(default=True)),
                ('api_ip_access_list', models.TextField(blank=True, null=True)),
                ('noofvisits', models.IntegerField(default=0)),
                ('pw_change', models.IntegerField(default=0)),
                ('lastvisitdate', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('alert_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('whenedited', models.DateTimeField(auto_now=True)),
                ('toured', models.IntegerField(default=0)),
                ('access_status', models.CharField(db_comment='This is the platform access status', max_length=3)),
                ('pg_access', models.CharField(db_comment='This is the payment gateway access status', max_length=3)),
                ('pg_limit', models.DecimalField(db_comment='This is the payment gateway payment amount limit per user', decimal_places=2, max_digits=11)),
                ('manager_role', models.CharField(blank=True, max_length=3, null=True)),
                ('bvn_no', models.CharField(blank=True, db_comment="Nigeria's bank verification number", max_length=15, null=True)),
                ('firebase_unique_id', models.CharField(blank=True, db_comment='This is the individual app unique id use for push notifications', max_length=255, null=True)),
                ('block_funds', models.DecimalField(decimal_places=2, max_digits=11)),
                ('dedicated_account_number', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('name_verification_info', models.TextField(blank=True, null=True)),
                ('bank_account_info', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'members',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
