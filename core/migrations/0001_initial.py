# Generated by Django 4.2.1 on 2023-05-16 09:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_code', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('salt', models.CharField(max_length=200, null=True)),
                ('sex', models.CharField(choices=[('M', 'male'), ('F', 'female')], max_length=6, null=True)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('street', models.CharField(max_length=100, null=True)),
                ('city', models.CharField(max_length=200, null=True)),
                ('state', models.CharField(max_length=100, null=True)),
                ('country', models.CharField(max_length=200, null=True)),
                ('DOB', models.DateField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('Smart Earner', 'Smart Earner'), ('Affilliate', 'Affilliate'), ('TopUser', 'TopUser'), ('API', 'API')], default='Smart Earner', max_length=30, null=True)),
                ('r_id', models.CharField(max_length=200, null=True)),
                ('secret_question_1', models.CharField(max_length=200, null=True)),
                ('secret_question_2', models.CharField(max_length=200, null=True)),
                ('secret_answer_1', models.CharField(max_length=200, null=True)),
                ('secret_answer_2', models.CharField(max_length=200, null=True)),
                ('email_confirmed', models.CharField(max_length=100, null=True)),
                ('phone_confirmed', models.CharField(max_length=100, null=True)),
                ('confirm', models.CharField(max_length=100, null=True)),
                ('aff_id', models.CharField(blank=True, max_length=50, null=True)),
                ('ref_id', models.CharField(blank=True, max_length=30, null=True)),
                ('find_us', models.CharField(max_length=100, null=True)),
                ('reg_ip', models.TextField(max_length=100, null=True)),
                ('Api_key', models.CharField(max_length=100, null=True)),
                ('api_active', models.CharField(max_length=100, null=True)),
                ('api_ip_access_list', models.CharField(blank=True, max_length=50, null=True)),
                ('no_of_visits', models.CharField(max_length=100, null=True)),
                ('last_visit_date', models.CharField(max_length=100, null=True)),
                ('alert_date', models.DateTimeField(auto_now=True)),
                ('when_joined', models.DateTimeField(auto_now_add=True)),
                ('when_edited', models.DateTimeField(auto_now=True)),
                ('toured', models.CharField(max_length=10, null=True)),
                ('access_status', models.CharField(max_length=10, null=True)),
                ('pg_access', models.CharField(max_length=100, null=True)),
                ('pg_limit', models.CharField(max_length=100, null=True)),
                ('manager_role', models.CharField(max_length=100, null=True)),
                ('BVN', models.CharField(max_length=50, null=True)),
                ('firebase_unique_id', models.CharField(max_length=100, null=True)),
                ('block_funds', models.CharField(max_length=100, null=True)),
                ('dedicated_account_number', models.CharField(blank=True, max_length=100, null=True)),
                ('name_verification_info', models.CharField(max_length=100, null=True)),
                ('bank_account_info', models.CharField(blank=True, max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(max_length=50)),
                ('referral_code', models.CharField(max_length=6)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
